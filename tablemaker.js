//【登録場所】選択テキスト
//【ラベル】選択範囲を表に変換する
//【更新日】2013/01/25 (version 0.80 alpha)
//【コマンド】$SCRIPT tablemaker.js $TAILCUT
//【コマンド】[↑がオススメ。コピペも出来てコンパクト。テンプレ用途]
//【コマンド】$SCRIPT tablemaker.js $USE_UNICODE $STYLE(0) $TAILCUT
//【コマンド】$SCRIPT tablemaker.js $TAILCUT $STYLE(1)
//【コマンド】$SCRIPT tablemaker.js $USE_UNICODE $STYLE(41) $TAILCUT
//【コマンド】$SCRIPT tablemaker.js $SEPARATOR( | ) $STYLE(1)
//  コマンドの書式
//    $SCRIPT tablemaker.js 引数1 引数2 引数3 ... (半角スペースを開けて以下の引数を書く)
//    ■引数 $PREVIEW … 表を作成したあとプレビュー画面を開きます
//    ■引数 $USE_UNICODE … 指定するとユニコードの空白文字を使用して表を作成する
//        コピペするとズレる為テンプレ用途では指定しないほうが無難。幅調整用のドット等の文字が気になる場合に指定する
//    ■引数 $SEPARATOR(区切り文字) … 各セルを指定した区切り文字で区切る。例： $SEPARATOR(　|　) (※ STYLE 1でのみ有効)
//    ■引数 $TAILCUT … 表の各行の末尾の余分な文字を消す。(※ STYLE 0か1でのみ有効)
//        各行の末尾のdot数を揃える場合は指定しない。dot数を揃えれば後ろに貼り付けやすくなるかも？
//    ■引数 $STYLE(数字) … 表の形式を指定する
//      $STYLE(0) … 罫線や区切り文字を使用せず表を作成する。(なるべくドット等のゴミが出ないように最適化してある)
//      $STYLE(1) … 区切り文字を使用して表を作成する。
//      $STYLE(41) … 「╋━╋」な罫線を外枠とヘッダー及びフッター行にのみ使用して表を作成する。 ( $STYLE(4) だとこれ )
//    [未実装]     $STYLE(20) … 「+----+」な罫線を内枠にのみ使用して表を作成する。( $USE_UNICODE時のみ )
//    [未実装]     $STYLE(21) … 「+----+」な罫線を内枠・外枠に使用して表を作成する。( $STYLE(2) だとこれ )( $USE_UNICODE時のみ )
//    [未実装]     $STYLE(30) … 「┼─┼」な罫線を内枠にのみ使用して表を作成する。
//    [未実装]     $STYLE(31) … 「┼─┼」な罫線を内枠・外枠に使用して表を作成する。( $STYLE(3) だとこれ )
//    [未実装]     $STYLE(40) … 「╋━╋」な罫線をヘッダー及びフッター行にのみ使用して表を作成する。
//    [未実装]     $STYLE(50) … 「╋━╋」な罫線を内枠にのみ使用して表を作成する。
//    [未実装]     $STYLE(51) … 「╋━╋」な罫線を内枠・外枠に使用して表を作成する。 ( $STYLE(5) だとこれ )
//
//【内容】選択範囲のpukiwikiライクな書式のテキストを罫線表に変換する 
//
// ■表の描き方…V2C書き込み欄の本文に以下の書式にしたがって描いた文字列を選択範囲で囲って外部コマンドを実行する
// ・例：「|」で挟んで各セルを書く。末尾に「b」を付けると次の行に水平線を挿入する(罫線モード時は罫線行を挿入する)
// |項目１|項目２|項目３|項目４|
// |２行目|は|こんな|感じ|
// |CENTER:方向指定を|LEFT:直接|CENTER:セルに書くことも|RIGHT:できる|
// 
// [未実装] ■直下に水平線の挿入…末尾に「b」を付ける
// (罫線モード時のみ実装済み)
// |直下に線を挿入する場合は|こんな|ふうに|やる|b
// 
// [未実装] ■改行…「&br;」を入れると改行される。罫線モード時のみ有効
// セル垂直結合時のみ表示される。それ以外で使うと&br;以降の文字は削除される
// |項目１&br;2行目です|項目２|項目３|項目４|
// |~|こんなふうにセル結合しないと|削除|される|
// 
// ■セルの結合… 「~」又は「>」のみのセルを書くと上か右のセルと結合する。罫線モード時のみ有効
// 「~」は上のセルと結合。「>」は右のセルと結合。pukiwikiの表っぽく書けるってことです
// |縦の結合|項目２|>|横の結合|
// |~|項目３|項目４|項目５|
// ・縦と横の複合して使用する場合右上のセルに文字を書いて他の部分を「>」と「~」で埋める
// |>|ここが基点|項目3|項目4|
// |~|~|項目3|項目５|
// 
// ■カラム行…この行以降の行の書式を変更する
// ・例 : 末尾に「c」を付けるとカラム行と見なす
// |CENTER:|LEFT:|RIGHT:|LEFT:|c
// ・方向指定
// 「LEFT:」文字を左寄せする
// 「CENTER:」文字を中心に寄せる
// 「RIGHT:」文字を右寄せする
// 
// ■ヘッダー/フッダー行… $STYLE(4)のときにこの行だけ太い罫線を使用する
// ・例 : 末尾に「h」又は「f」を付けるとヘッダー/フッダー行と見なす (「h」は1行目のみ有効(カラム行は行数に含まない)、「f」は最終行のみ有効 )
// |項目１|項目２|項目３|項目４|h
// |項目１|項目２|項目３|項目４|
// |項目１|項目２|項目３|項目４|f
// 
// [未実装] ■post.jsでに実装して本文中で「!table」みたいなコマンドを入れて書き込むと
// 表に変換する機能。(変換したあと書き込みはキャンセルさせる。書き込み欄が表に変わってるので
// 再度書き込みボタン押すと書き込めるみたいな
var DEBUG = undefined;
function log(format /*, ...*/)
{
	var args = arguments;
	var message = format.replace(/\{(\d)\}/g, function(m, c) { return args[parseInt(c) + 1]; });

	v2c.println("[tablemaker.js] " + message);
}

(function() {
var USE_UNICODE = false;
var TAILCUT = false;
var SEPARATOR = '|';
var STYLE = 0;
var PREVIEW = false;

if (v2c.context.args.length > 0) {
	var argLine = v2c.context.argLine;
	if (/\$USE_UNICODE/i.test(argLine)) {
		USE_UNICODE = true;
	}
	if (/\$TAILCUT/i.test(argLine)) {
		TAILCUT = true;
	}
	if (/\$SEPARATOR\(([^\)]+)\)/i.test(argLine)) {
		SEPARATOR = RegExp.$1;
	}
	if (/\$STYLE\((\d+)\)/i.test(argLine)) {
		STYLE = parseInt(RegExp.$1);
	}
	if (/\$PREVIEW/i.test(argLine)) {
		PREVIEW = true;
	}
}

//v2c.println('USE_UNICODE = ' + USE_UNICODE);
//v2c.println('TAILCUT = ' + TAILCUT);
//v2c.println('SEPARATOR = "' + SEPARATOR + '"');
//v2c.println('STYLE = ' + STYLE);
//v2c.println('PREVIEW = ' + PREVIEW);

var LEFT = 1, RIGHT = 2, HEAD = 4, TAIL = 8, CENTER = 16;	// 位置調整用定数

var CHARDOTS =
[
	/*Fantasioso Acsii Art ( http://www.geocities.jp/file_file_file_aaa/guide/glinedot.html )*/
	/* 0 dot */ "",
	"",
	"",
	"',.:;il",
	"!Ij{|}ﾞﾟＩｉｊｌ|",
	/* 5 dot */ "()[]_fｆｔ ",
	"rtｒ",
	"?^`gksxz~｡｢｣､･ｨｮﾄﾐ",
	"\"#$%*+-/0123456789<=>\abcdehnopquvyｧｩｪｫｬｭｯﾉﾋﾒﾖﾘ・：；゛゜´｀¨＾‐‘’“”（）〔〕［］｛｝〈〉《》「」『』【】†‡¶ｖｘｙｚ",
	"EFJLTYZｦｲｶｸｺｼｿﾀﾇﾌﾗﾚﾛﾜﾝａｃｅｇｓく",
	/* 10 dot */ "&ABDHKNPRSUVXwｰｱｳｴｵｷｹｽｾﾁﾂﾃﾅﾆﾈﾊﾍﾎﾏﾓﾕＦＪＬＴＸＹＺｂｄｈｋｎｏｐｑｕぅィトョ",
	"@CGOQｻﾑﾔﾙ、。，．ゞ０１２３４５６７８９ＡＥＰＶうドノミ　",
	"MWmヽヾゝＢＣＤＧＨＫＮＲＳＵｗぁぇさしじとょりァゥェタッヒメヨリヮヵヶ",
	"ＯＱぃぉぐこっもらイォカクコソヌフャュラヲ",
	"えきぎござちぢてでどなまゃゅよるろゎをアエゴシジスゾツテビピブプマモレロン",
	/* 15 dot */ "ーＭｍあいおけすそぞただつづにひびぴんウオガキギグケゲズセダチヂヅデナニネヘベペホボポユワヴ",
];


var UNICODE_DOTS = 
[
	[
	0,16,8,8,8,8,8,8,8,0,0,8,8,0,8,8,8,8,8,8,8,8,8,8,8,8,8,8,0,0,0,0,5,4,8,8,8,8,10,3,5,5,8,8,3,8,3,8,8,8,8,8,8,8,8,8,8,8,3,3,8,8,8,7,11,10,10,11,10,9,9,11,10,4,9,10,9,12,10,11,10,11,10,10,9,10,10,12,10,9,9,5,8,5,7,5,7,8,8,8,8,8,5,7,8,3,4,7,3,12,8,8,8,8,6,7,6,8,8,10,7,8,7,4,4,4,7,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,4,8,11,8,9,4,16,8,11,6,11,10,8,11,11,16,16,4,4,8,8,8,3,3,4,6,11,8,8,8,7,10,10,10,10,10,10,11,11,9,9,9,9,5,5,7,5,10,10,11,11,11,11,11,16,11,10,10,10,10,9,9,9,8,8,8,8,8,8,11,8,8,8,8,8,5,5,7,6,8,8,8,8,8,8,8,16,8,8,8,8,8,8,8,8,
	10,8,10,8,11,8,11,8,11,8,11,8,11,8,10,10,10,9,9,8,9,8,9,8,9,8,9,8,11,7,11,7,11,7,11,7,10,8,10,8,7,7,6,6,7,7,4,4,4,3,11,6,9,7,10,7,7,9,4,9,4,9,5,9,5,9,5,10,8,10,8,10,8,8,10,8,11,8,11,8,11,8,11,11,10,6,10,6,10,7,10,7,10,7,10,7,10,7,9,6,9,6,9,6,10,8,10,8,10,8,10,8,10,8,10,8,11,10,9,8,9,9,7,9,7,9,7,8,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,10,11,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,16,7,7,10,8,10,8,11,11,11,8,
	7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,8,8,8,8,8,8,9,10,8,8,11,7,7,11,8,6,10,8,8,8,10,8,8,8,4,6,3,6,6,6,10,11,11,11,10,10,8,8,11,9,9,6,6,8,6,6,7,7,8,8,7,10,10,9,10,6,6,9,8,8,9,11,8,9,9,7,8,8,8,8,8,8,8,7,7,10,8,7,8,6,10,8,8,11,11,11,11,11,11,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,4,5,3,3,3,4,4,5,5,7,7,7,7,7,7,3,6,16,16,3,16,4,4,4,4,4,4,4,4,4,4,7,3,4,4,8,7,8,7,7,7,7,7,7,11,11,11,11,11,4,4,4,4,4,4,4,4,4,4,4,5,5,4,3,4,4,4,4,5,5,4,
	5,5,7,7,6,0,7,0,6,0,0,7,7,0,0,7,0,0,0,0,0,0,0,0,4,4,6,0,2,6,6,6,6,0,0,0,6,3,0,0,0,3,7,0,7,0,0,7,7,0,0,0,7,0,0,0,0,2,7,7,7,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,7,7,7,5,5,7,7,7,7,4,7,7,7,3,7,7,7,7,7,5,6,10,3,10,11,7,7,11,7,11,11,5,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,7,16,16,16,16,16,16,16,6,9,8,7,8,6,8,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,9,16,16,16,16,16,16,16,6,8,7,8,10,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,6,7,7,7,7,7,7,7,7,7,
	7,16,8,9,9,10,4,5,9,11,11,8,10,7,9,10,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,7,16,8,6,7,7,3,5,5,9,9,8,8,7,8,8,11,10,10,9,11,10,10,8,11,9,11,8,11,9,10,8,11,10,11,8,11,8,11,8,11,11,11,8,11,10,11,10,11,8,9,8,7,7,7,7,7,7,7,7,7,7,7,7,7,7,9,8,10,8,11,11,9,7,10,8,10,8,11,9,11,10,10,9,11,9,11,10,11,9,11,8,9,8,10,9,10,9,10,9,11,9,10,8,10,8,10,8,11,9,11,9,4,11,11,10,8,7,7,11,9,7,7,10,8,7,7,7,10,8,10,8,11,11,9,8,9,8,9,8,11,11,9,7,9,8,10,9,10,9,11,8,11,8,11,8,7,7,11,8,11,8,11,8,10,8,7,7,11,10,7,7,7,7,7,7,
	7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,9,8,8,9,8,8,8,8,10,8,8,6,11,8,9,7,8,9,9,9,9,9,8,9,8,9,8,9,8,9,8,8,9,7,10,8,9,9,7,7,3,3,4,5,4,5,6,7,11,7,7,7,7,7,7,7,9,7,7,4,11,7,7,7,6,8,6,8,4,8,6,7,6,11,6,7,7,8,11,7,7,5,11,8,7,9,8,7,5,5,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,0,0,8,8,8,5,8,3,8,8,5,8,8,5,8,7,7,7,7,7,7,7,7,9,9,6,9,9,4,5,9,9,4,8,8,8,9,9,5,5,10,9,9,9,7,8,9,8,11,10,7,7,7,7,7,8,8,8,3,5,7,7,7,7,7,7,7,7,7,7,7,
	11,18,14,11,7,7,7,7,0,7,7,6,7,4,7,7,7,7,7,7,7,7,0,0,0,0,0,4,7,7,4,7,7,5,3,3,5,3,8,3,9,4,9,9,7,7,7,4,4,6,6,10,10,13,13,7,7,7,7,0,0,0,0,0,3,9,7,7,6,4,6,4,5,8,8,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,3,4,5,9,7,7,3,3,3,0,4,5,5,8,9,9,9,9,9,9,9,9,7,7,7,7,7,7,7,4,4,4,4,4,4,4,4,4,6,6,6,6,6,6,6,6,6,10,10,10,13,13,7,7,9,9,9,9,9,9,7,7,7,14,7,7,7,7,7,7,7,7,7,7,6,6,6,6,6,6,6,6,6,5,7,4,4,4,4,5,5,5,5,5,5,5,5,8,9,8,5,8,8,10,10,3,4,7,7,7,7,7,7,7,13,13,7,7,7,7,7,7,0,0,7,7,7,7,7,7,7,4,6,7,7,7,7,7,7,7,7,7,7,10,13,7,5,4,5,
	6,3,3,3,3,4,4,4,4,4,5,7,6,6,7,7,9,6,8,15,15,4,4,8,5,3,7,9,9,3,11,10,7,8,8,7,7,9,8,8,10,6,4,8,7,8,15,4,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,7,7,6,8,9,9,9,9,9,9,9,9,7,7,4,4,6,10,7,7,7,9,9,7,7,7,4,4,6,6,6,6,6,6,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,9,10,9,9,8,7,7,5,6,6,8,7,7,7,8,13,5,7,9,9,6,7,7,7,6,6,8,9,13,13,13,7,7,7,7,7,5,7,7,7,7,7,7,7,7,7,7,7,5,7,7,7,7,7,7,7,7,7,7,7,7,7,7,6,6,6,6,6,6,6,6,6,6,3,8,5,7,7,7,8,6,8,5,5,7,6,4,9,5,8,8,7,9,6,7,6,7,6,6,6,6,6,6,5,5,5,6,6,6,6,6,6,6,4,6,4,4,7,11,6,6,5,7,7,7,7,7,
	7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,
	7,8,8,12,9,9,13,7,7,7,9,11,9,7,7,7,7,13,13,13,13,9,10,8,8,7,8,9,9,10,8,7,8,7,7,10,8,8,7,8,8,8,7,9,7,9,9,8,6,6,9,9,9,7,9,7,9,7,7,7,8,6,11,12,11,8,8,8,8,8,8,8,8,11,11,11,11,8,7,7,12,8,8,8,8,7,7,7,9,10,8,9,7,7,9,8,11,9,8,8,5,7,6,6,6,6,6,6,6,6,6,6,4,4,9,7,7,7,7,7,7,7,7,8,9,7,7,7,7,7,12,12,7,9,11,6,7,8,9,8,8,7,7,7,9,7,7,8,9,9,7,7,7,8,6,7,8,8,9,6,7,8,6,6,8,7,6,7,7,7,7,9,7,8,7,7,7,7,7,7,7,7,7,7,7,6,7,7,7,6,10,10,10,7,7,7,7,7,7,11,10,7,7,14,14,7,7,7,7,7,7,7,7,7,7,10,7,7,7,7,8,6,7,7,8,8,7,7,7,7,7,6,6,8,6,7,9,6,9,8,7,7,11,11,8,9,10,6,7,5,10,7,7,7,7,7,
	7,8,8,12,7,9,12,10,10,8,8,7,7,7,7,7,9,7,7,8,9,8,8,9,8,7,8,8,8,8,8,8,8,8,8,7,8,8,8,8,8,7,8,7,8,7,8,8,8,7,8,8,7,7,8,7,8,8,7,7,8,7,11,11,11,8,8,7,7,7,7,8,8,7,7,8,8,8,7,7,7,0,7,7,7,7,7,7,7,8,9,8,8,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,8,8,7,8,16,0,7,7,7,7,7,7,7,7,7,7,7,8,8,11,7,11,14,8,9,8,11,11,10,11,7,11,11,14,7,14,14,7,10,10,9,7,10,9,9,10,10,7,7,7,8,10,9,9,8,9,9,7,9,7,10,10,9,9,7,7,10,10,7,9,9,9,9,7,7,7,8,6,11,10,11,8,8,8,8,8,7,8,8,11,7,11,11,8,7,7,12,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,10,10,8,8,7,7,8,8,8,8,8,8,8,8,8,8,7,11,7,7,7,7,7,7,7,7,7,7,7,7,7,7,
	7,9,13,13,7,8,10,8,8,8,8,8,7,7,7,8,9,7,7,7,8,8,8,8,8,8,7,7,7,8,7,7,8,7,7,8,7,7,7,8,7,7,8,9,7,8,8,8,8,7,8,7,7,7,8,8,8,7,7,7,9,6,11,9,12,9,9,9,0,7,7,15,15,7,7,17,17,9,7,7,7,7,7,7,7,7,9,11,7,7,7,7,7,7,7,8,8,7,0,0,7,7,8,8,8,8,8,8,8,8,8,8,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,12,8,7,14,16,13,10,13,16,7,7,7,10,10,12,7,13,13,25,10,7,7,7,12,9,7,12,7,15,11,7,7,7,18,10,7,7,7,9,14,9,7,7,7,12,12,7,11,13,13,12,13,14,17,19,21,7,7,7,7,16,11,9,15,19,7,7,7,19,18,23,7,26,25,32,9,7,7,13,7,7,7,7,7,7,22,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,10,11,11,10,14,15,10,14,15,12,11,13,12,16,27,11,16,24,14,12,7,7,7,7,7,
	7,11,14,10,7,9,9,8,10,8,11,15,9,7,8,8,8,7,8,8,9,7,9,7,13,8,8,8,8,15,10,8,7,8,8,8,8,8,8,8,8,7,8,8,8,8,13,15,7,9,8,7,7,8,7,8,8,12,7,7,7,10,12,8,8,12,16,12,15,7,8,8,8,7,8,8,11,8,7,7,7,7,7,7,7,8,8,7,8,8,7,7,7,7,7,7,19,13,0,0,7,7,7,7,8,5,7,8,7,6,8,7,7,7,7,7,7,7,7,7,6,4,6,9,8,9,10,10,7,7,14,11,7,8,8,8,11,13,15,12,8,7,8,8,8,7,8,8,8,7,9,8,9,8,8,8,8,13,11,8,8,8,8,8,8,8,8,8,8,7,8,8,8,8,12,13,8,8,8,8,7,8,8,8,8,8,7,7,8,6,16,11,16,12,16,11,14,7,10,15,14,7,18,23,15,13,7,7,7,7,7,7,7,13,12,7,7,7,7,7,7,7,8,7,15,11,0,0,7,7,8,8,8,8,8,8,8,8,8,8,7,6,11,7,7,7,7,7,7,7,7,7,7,7,7,7,
	7,7,15,13,7,18,19,14,23,10,19,13,14,7,18,18,25,7,10,17,19,13,14,11,17,12,14,19,10,19,17,7,9,15,16,16,12,10,8,11,11,7,14,14,16,9,10,14,10,10,11,10,10,15,12,14,15,18,7,7,7,7,15,13,12,13,14,15,7,7,16,15,24,7,23,22,25,9,7,7,7,7,7,7,7,7,7,17,7,7,7,7,7,7,7,7,13,15,0,0,7,7,7,12,16,14,10,9,15,10,15,13,12,11,16,13,12,14,7,7,7,15,18,13,10,13,13,14,7,7,11,11,7,7,11,10,10,7,7,8,13,12,16,10,14,7,8,14,8,8,13,7,7,7,10,8,8,8,8,10,7,8,8,13,12,10,9,7,8,8,8,12,8,9,8,5,8,10,7,7,8,7,8,8,8,8,8,7,7,9,7,7,7,8,8,8,8,9,8,7,7,7,7,7,7,7,7,11,11,11,7,7,7,7,7,7,11,14,14,21,18,19,19,12,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,15,12,15,7,7,7,7,7,7,7,7,7,7,7,
	7,7,7,7,7,7,8,5,6,8,7,7,9,9,7,7,6,8,10,9,7,7,7,7,6,8,7,7,7,7,8,8,7,7,7,6,7,6,7,6,8,8,6,7,9,6,7,6,5,7,5,12,7,7,7,7,7,7,7,7,7,7,7,10,5,8,5,6,6,5,6,7,7,7,7,7,7,7,7,7,7,7,8,8,9,9,6,9,8,7,8,8,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,9,8,7,9,7,7,6,8,7,8,7,7,9,7,7,7,7,7,7,9,10,9,9,7,9,9,9,10,10,10,10,7,9,9,8,7,8,7,8,7,7,9,9,7,8,8,6,5,7,6,13,7,7,7,7,7,7,7,7,7,6,7,7,5,10,5,5,4,7,7,7,7,7,7,7,7,7,7,7,9,9,7,9,8,8,10,9,9,11,7,7,15,15,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,
	6,5,8,8,7,3,7,11,3,6,7,2,2,2,3,2,2,3,12,8,3,6,7,7,10,5,3,8,8,3,7,7,4,4,5,4,6,5,5,5,5,4,7,7,7,8,7,7,7,7,7,7,3,5,7,5,5,5,11,11,5,5,9,9,5,5,5,5,5,5,5,5,7,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,6,7,7,7,7,5,5,5,5,5,5,5,5,5,5,5,5,5,5,8,5,5,5,5,5,6,5,5,5,5,5,6,7,7,7,7,5,5,5,5,5,5,5,5,7,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,7,5,5,8,6,8,8,6,4,5,8,5,7,7,7,7,7,6,7,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,
	4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,7,7,7,7,7,7,7,7,7,7,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,7,7,7,7,7,7,7,7,7,7,7,7,7,7,4,4,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,5,6,6,10,6,6,9,10,7,5,11,6,6,9,6,6,9,6,9,9,9,5,9,6,6,6,7,6,6,7,6,9,6,7,7,6,6,6,9,6,6,6,8,5,4,7,7,7,
	
	6,8,6,6,6,6,8,10,6,8,9,6,8,7,9,8,8,10,11,8,10,8,8,10,10,12,11,9,11,9,9,11,8,11,9,8,9,10,8,9,6,7,6,8,7,6,7,8,6,8,8,6,8,6,6,8,6,8,8,6,8,7,6,8,7,7,7,8,7,7,7,7,7,7,11,7,7,11,7,7,7,7,7,8,7,7,7,7,7,7,11,7,7,10,7,7,6,8,8,6,8,8,6,8,6,8,9,6,8,8,6,8,7,7,7,8,7,7,7,7,7,7,7,8,7,7,7,8,6,9,8,6,8,6,9,9,10,7,10,8,8,9,7,7,4,6,5,6,5,6,7,6,7,8,7,7,7,7,8,7,6,8,9,6,8,6,6,7,6,8,9,6,8,6,6,8,10,7,10,8,8,8,7,7,8,10,10,8,10,8,8,7,12,7,12,9,10,10,7,7,8,10,7,7,7,10,7,9,6,8,8,6,8,5,6,7,6,8,8,5,7,7,6,7,10,10,10,10,10,10,10,10,5,6,7,6,7,7,7,9,7,9,8,7,9,8,8,9,7,9,8,7,9,8,8,9,
	7,9,8,7,8,8,8,9,5,7,6,7,6,7,5,5,9,7,9,6,7,8,7,7,5,7,7,7,7,7,5,6,9,11,11,9,11,8,9,11,12,12,12,11,14,11,12,13,6,8,8,6,8,7,6,8,6,8,8,6,8,7,6,8,5,8,6,5,6,5,6,7,7,8,7,8,8,7,8,8,8,8,8,9,8,8,9,8,7,9,7,7,7,7,7,0,8,4,6,4,4,5,8,4,9,6,6,6,6,6,6,6,7,6,6,7,8,7,6,8,7,10,6,5,8,7,7,7,13,13,11,13,10,10,8,11,8,8,8,8,8,9,8,9,4,5,4,4,5,10,5,11,11,5,7,7,7,7,7,7,9,8,8,8,11,4,8,9,7,8,9,6,7,12,7,11,5,7,11,11,7,7,9,11,6,10,11,10,7,9,9,6,9,11,8,7,7,10,8,12,10,11,13,6,10,13,7,8,6,8,8,6,11,6,9,9,9,9,6,10,9,7,7,8,8,10,7,8,10,9,9,8,9,10,13,9,13,7,7,14,8,11,8,10,7,7,7,7,7,7,7,7,7,7,7,7,
	7,10,10,10,10,9,9,9,9,9,9,9,10,10,10,10,10,10,11,11,11,11,9,11,11,11,11,9,8,7,6,4,4,6,6,4,6,6,4,3,5,5,5,13,11,11,13,10,10,10,10,9,9,9,9,9,9,9,10,10,10,10,10,10,10,11,10,11,11,10,11,10,9,5,2,4,10,10,10,10,8,8,8,8,8,8,8,12,11,11,12,11,12,10,10,10,10,10,10,10,10,10,4,12,12,11,10,8,8,8,8,8,8,8,8,8,9,9,9,10,9,10,9,9,9,9,9,9,9,9,9,5,5,10,10,10,9,8,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,4,4,8,7,7,7,7,7,7,7,7,9,9,9,8,9,8,8,9,8,9,9,8,9,8,9,4,4,4,5,7,11,11,11,11,11,11,11,11,11,13,13,13,11,13,11,11,7,6,7,10,10,10,10,10,10,10,10,10,12,12,12,12,12,12,10,12,10,12,12,11,12,11,6,5,8,7,7,7,7,7,7,7,7,7,8,9,9,8,9,8,8,9,8,9,
	9,9,9,9,9,4,5,4,6,4,4,4,13,13,12,12,10,10,10,8,8,8,8,12,12,12,12,12,12,10,10,10,10,10,10,10,10,6,7,7,7,7,7,7,7,7,7,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,4,6,4,4,11,11,11,11,11,11,7,7,7,7,7,7,9,9,4,5,8,10,10,10,10,10,10,10,10,12,12,6,10,10,10,10,10,10,9,9,9,9,11,11,5,10,10,8,8,14,10,10,8,8,9,9,9,9,9,9,9,6,9,4,12,12,12,12,12,12,12,9,8,8,8,8,10,10,10,10,14,14,14,12,12,14,14,7,10,8,8,8,8,11,11,11,11,7,10,10,10,10,10,10,6,7,7,7,7,7,7,7,4,7,6,6,6,6,7,7,7,7,9,9,9,9,9,9,9,9,9,9,9,9,10,10,9,9,9,9,10,10,9,9,9,9,10,10,9,9,9,9,10,10,9,9,9,9,10,10,8,8,8,8,10,10,8,8,8,8,10,10,8,8,8,8,5,12,12,7,7,7,7,12,12,8,8,8,8,12,12,8,8,8,
	8,6,8,8,11,11,11,11,12,12,7,7,7,7,10,10,8,8,8,8,8,8,8,11,11,11,11,11,8,8,11,11,11,11,11,11,8,8,8,8,11,11,8,8,8,8,10,10,8,7,7,8,12,12,8,8,8,8,14,14,7,7,7,7,9,9,8,8,8,8,5,5,9,9,8,8,8,8,12,12,7,7,7,7,12,12,7,7,7,7,5,12,12,8,8,8,8,12,12,7,7,7,7,12,12,8,8,8,8,8,4,12,14,18,18,15,15,18,18,7,7,7,7,7,7,7,7,7,7,3,5,7,8,10,3,5,7,8,10,3,5,7,8,10,3,5,7,8,10,3,5,7,7,8,7,5,5,7,7,7,8,8,7,6,7,7,6,6,4,6,6,6,6,4,4,6,6,6,4,5,7,7,7,6,6,6,7,7,6,3,6,4,6,3,3,6,4,6,4,6,6,6,5,7,3,3,6,6,4,4,6,4,6,6,8,8,7,3,4,4,5,6,8,6,7,6,7,6,6,8,7,3,6,6,7,4,3,8,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,
	7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,10,10,10,11,10,10,10,9,15,11,9,9,9,11,13,10,9,9,10,10,10,9,10,10,10,12,4,11,4,11,10,11,11,11,10,10,14,10,9,9,9,9,9,10,10,10,10,10,10,9,7,9,4,4,11,7,7,7,7,7,7,7,11,15,15,11,11,11,16,16,7,11,11,7,7,7,7,7,7,7,7,7,7,6,6,7,4,7,19,7,10,5,6,7,7,7,8,8,9,11,8,8,8,9,9,8,7,7,7,7,7,7,7,7,3,10,7,6,5,8,4,7,7,7,7,7,7,7,
	5,16,6,10,6,6,4,4,7,10,2,0,0,0,0,7,5,5,6,6,4,5,6,5,5,4,7,7,7,7,7,7,9,7,8,7,7,10,10,11,4,6,5,5,6,6,4,4,5,5,6,5,5,4,4,4,5,5,4,4,8,8,9,7,9,6,8,2,8,9,8,8,8,8,10,7,6,7,7,5,4,4,5,5,5,4,5,4,4,10,6,5,5,7,8,3,7,10,8,4,6,7,5,5,8,6,5,6,4,4,5,5,3,5,5,8,5,7,6,4,7,7,7,7,7,7,7,7,6,8,6,5,5,11,9,12,8,5,8,6,5,7,6,5,5,4,5,5,5,6,5,5,5,7,9,7,5,8,5,6,4,9,5,5,5,5,4,5,7,10,10,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,
	7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,6,7,7,9,9,9,10,10,7,7,10,7,10,7,10,9,7,9,8,3,7,7,7,6,6,7,7,7,6,9,7,7,7,6,7,7,6,7,7,7,7,7,7,7,7,7,7,7,10,10,11,5,11,7,7,7,7,11,7,7,7,11,12,7,11,8,8,6,7,9,11,11,11,7,7,11,11,11,7,11,11,6,7,8,5,7,11,6,7,7,7,7,7,7,7,7,6,5,7,5,7,17,23,16,6,7,16,9,10,11,8,11,11,7,7,6,7,11,5,7,6,6,7,7,7,7,7,7,8,5,7,6,7,9,7,10,6,7,7,7,7,7,10,10,7,7,7,8,7,7,6,8,7,6,11,11,12,14,12,12,7,7,7,8,7,7,6,8,7,7,11,11,12,14,12,12,
	7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,
	7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,
	7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,
	7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,0,0,0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,
	7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,12,12,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,11,10,11,10,11,10,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,16,16,16,16,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,9,8,7,7,7,7,7,7,7,7,7,7,7,7,
	7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,8,8,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,4,7,4,4,4,7,7,7,7,7,7,7,7,7,7,7,4,4,4,7,7,7,7,7,7,7,7,7,7,7,7,7,4,4,4,7,7,7,7,7,7,7,7,7,7,7,7,7,5,5,4,7,7,7,7,7,7,7,7,7,7,7,7,7,7,4,7,
	8,16,8,16,5,4,3,10,5,2,1,0,0,0,0,0,8,5,8,8,11,16,16,11,8,8,3,3,8,8,6,7,8,8,3,4,3,16,16,4,0,0,0,0,0,0,0,7,16,11,16,16,11,5,8,11,7,8,8,16,6,7,5,11,11,8,11,5,8,6,6,12,9,9,7,7,7,7,7,7,7,16,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,7,7,7,7,7,0,0,0,0,0,0,5,7,7,7,5,5,5,5,5,5,5,5,5,3,3,6,5,5,5,5,5,5,5,5,5,5,5,5,5,3,3,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,10,11,11,9,11,11,11,11,11,11,11,8,11,10,9,11,8,10,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,
	11,11,11,16,9,8,11,10,10,11,7,11,11,11,8,8,9,10,11,7,11,11,16,11,9,10,11,11,11,10,11,11,11,16,9,10,9,8,10,10,9,6,10,16,11,10,9,6,8,11,9,11,7,8,8,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,8,8,8,8,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,7,7,7,7,7,7,7,7,7,7,7,7,7,16,16,16,16,11,6,11,11,11,11,11,11,11,11,11,6,11,6,11,11,11,6,11,6,6,11,11,11,11,11,11,8,8,8,8,8,11,11,11,11,11,11,11,11,11,11,4,4,11,11,4,4,11,9,11,11,11,11,11,11,11,11,11,11,11,9,16,9,16,9,11,11,11,11,11,11,11,11,6,6,11,6,11,6,11,11,9,9,9,9,9,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,
	16,8,16,16,8,8,11,16,16,8,8,16,8,8,8,9,8,16,11,8,8,8,8,8,8,3,16,8,8,16,16,16,16,8,8,8,8,16,8,16,16,16,16,16,16,8,16,8,8,8,8,8,16,16,8,8,8,8,8,8,8,16,8,8,8,8,8,8,8,8,8,8,7,8,8,8,8,8,8,8,8,8,16,8,8,8,8,8,8,8,8,8,8,8,8,8,16,16,8,8,8,8,16,16,8,8,16,16,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,16,16,8,8,16,16,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,16,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,16,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,7,7,7,7,7,7,7,7,7,7,7,7,7,7,
	7,7,10,7,7,9,9,16,7,7,7,7,7,7,7,7,10,7,16,7,7,7,7,7,16,7,7,7,7,7,7,7,11,11,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,7,16,7,7,7,7,7,7,7,7,7,7,7,16,16,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,
	7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,16,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,7,
	16,16,16,16,11,11,11,11,11,11,11,11,16,11,11,16,16,11,11,16,16,11,11,16,16,11,11,16,16,16,11,11,16,11,11,16,16,16,11,11,16,11,11,16,16,11,11,16,16,11,11,16,16,11,11,16,16,11,11,16,16,11,11,16,11,11,16,11,11,11,11,11,11,11,11,16,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,7,7,7,7,7,7,7,7,7,7,16,16,8,8,8,8,8,8,8,8,4,4,11,8,8,8,8,8,16,16,8,8,8,8,8,8,7,8,16,16,8,8,8,8,8,8,7,8,16,16,8,8,8,16,8,8,16,16,8,8,8,8,8,8,8,8,7,7,8,8,8,8,8,8,8,8,8,8,8,8,4,8,8,8,8,8,8,8,8,16,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,
	16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,7,7,16,16,7,7,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,9,9,9,8,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,11,11,10,11,10,11,11,11,16,6,16,11,11,16,6,16,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,
	7,16,16,16,16,7,16,16,16,16,7,7,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,7,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,7,16,7,16,16,16,16,7,7,7,16,7,16,16,16,16,16,16,16,7,7,16,16,16,16,16,16,16,7,7,7,7,7,7,7,7,7,7,7,7,7,7,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,7,7,7,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,7,16,16,16,16,16,16,16,16,16,16,16,16,16,16,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,
	8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,
	7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,8,8,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,8,8,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,16,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,9,9,7,7,7,7,
	7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,
	7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,
	7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,
	7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,5,10,10,9,9,9,7,8,8,7,7,5,9,8,6,7,10,10,4,9,8,9,7,7,9,6,6,8,9,6,7,3,9,3,7,5,10,10,7,3,8,10,10,8,5,9,8,7,9,8,6,10,5,10,7,7,7,7,7,7,7,7,7,4,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,11,9,9,8,8,8,7,7,7,8,7,7,9,9,8,11,14,7,9,8,9,7,8,7,7,7,7,7,7,7,7,7,8,10,10,8,10,8,8,7,7,7,7,8,7,7,7,7,10,10,10,10,10,10,10,7,14,14,14,13,16,13,14,7,7,7,7,8,7,7,7,7,6,8,9,6,8,6,6,7,8,10,10,8,10,8,8,7,5,7,6,7,6,7,5,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,
	7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,4,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,16,16,7,7,16,7,16,16,16,7,16,16,16,16,7,7,7,7,7,7,7,16,7,16,7,7,7,7,16,16,7,7,7,7,7,7,7,16,7,16,7,7,16,7,16,7,16,7,7,7,7,16,7,7,16,16,7,7,7,16,16,7,16,7,7,7,7,7,7,7,16,7,7,7,16,7,16,16,7,16,7,7,7,7,7,7,16,16,7,7,7,7,7,7,16,7,7,7,7,16,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,
	7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,16,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,16,16,16,16,16,16,16,16,16,16,16,16,7,7,7,7,
	11,11,11,16,16,16,16,16,8,8,8,8,8,8,8,8,8,8,16,16,8,8,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,0,0,0,0,0,0,16,16,16,16,16,16,16,16,7,7,7,16,16,16,16,7,7,12,15,13,15,10,11,12,14,13,15,16,16,14,14,9,13,15,16,13,14,12,14,12,12,15,16,16,16,15,15,15,15,14,14,13,15,15,14,14,12,14,14,15,16,16,16,16,16,16,15,15,15,16,16,16,16,16,16,16,16,16,14,16,16,16,13,14,16,14,16,12,14,13,12,14,16,14,14,16,16,16,14,15,13,13,13,7,7,0,0,8,8,12,11,16,16,12,14,10,13,12,15,12,14,13,15,13,15,15,15,13,15,15,15,13,14,16,16,14,14,14,15,15,16,13,14,12,15,15,15,12,14,15,14,15,10,11,15,15,13,15,11,16,16,16,12,14,14,13,14,14,15,15,15,15,15,15,14,11,16,12,14,13,16,13,15,10,12,13,12,16,14,14,12,15,16,16,13,14,15,12,12,15,15,15,15,8,15,12,12,16,
	
	16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,7,7,7,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,7,7,7,7,7,7,7,7,7,7,7,7,7,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,7,7,7,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,7,7,7,7,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,7,
	
	],
	/* 13312-19893 = 16*/
	/* 19894-19967 = 7 */
	/* 19968-40891 = 16*/
	/* 40892-40959 = 7 */
	/* 40960-42124 = 11*/
	[
	7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,
	9,9,11,11,11,12,14,9,9,11,11,11,7,7,11,11,15,15,11,11,13,10,8,8,10,10,16,16,9,9,18,15,11,9,12,17,11,12,12,5,11,12,6,13,9,9,9,11,11,9,9,11,11,8,8,4,7,7,11,11,11,8,10,7,13,13,13,8,8,12,10,7,10,7,12,12,12,12,11,11,11,9,11,10,9,9,9,7,7,10,9,9,9,12,8,8,11,11,12,12,11,11,8,9,9,12,7,13,9,12,12,6,12,10,10,9,11,11,7,7,10,10,7,11,7,9,9,9,9,12,12,10,10,11,12,10,11,5,9,6,6,8,4,12,13,9,10,12,7,10,10,10,13,9,10,11,11,10,10,12,12,12,12,13,7,8,8,11,9,9,9,9,13,13,13,13,10,10,10,10,9,7,7,7,11,7,9,13,13,11,10,9,11,13,13,9,9,11,11,11,13,8,8,8,10,8,10,6,6,10,10,10,11,10,11,7,9,9,6,10,14,9,9,7,13,9,15,9,10,13,10,10,7,9,8,10,14,12,12,11,11,10,10,13,13,10,10,10,10,10,10,11,11,11,11,10,
	10,10,10,9,9,9,9,9,11,7,10,12,11,7,6,12,20,9,14,5,11,12,7,10,13,8,13,13,9,10,12,9,9,9,9,9,9,9,9,9,9,9,15,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,
	7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,5,5,5,6,4,4,3,3,3,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,4,3,5,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,
	7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,11,11,11,9,9,9,9,9,9,9,7,9,9,10,10,10,9,9,9,9,10,9,9,9,7,9,9,9,12,9,9,10,9,7,9,9,12,9,7,8,7,9,9,7,9,9,9,10,12,7,4,6,8,8,2,6,
	],
	/* 43128-44031 = 7 */
	/* 44032-55203 = 16*/
	/* 55204-57343 = 7 */
	/* 57344-59243 = 8 */
	[
	16,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,16,16,16,16,16,16,16,16,16,16,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,16,16,16,16,16,16,16,16,16,16,16,16,16,8,8,8,8,8,8,8,8,8,8,8,8,
	8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,
	],
	/* 59493-63743 = 8 */
	[
	
	16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,7,7,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,
	7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,4,8,8,9,11,10,11,10,10,11,9,11,7,11,11,11,11,9,9,9,9,6,9,9,4,6,7,9,4,8,8,8,7,9,7,5,10,7,9,9,7,8,9,8,11,10,4,9,8,9,10,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,
	7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,
	7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,16,7,7,7,
	7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,16,16,16,16,16,16,16,16,16,16,7,7,7,7,7,7,0,0,0,0,4,4,4,7,7,7,7,7,7,7,7,7,16,16,7,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,8,8,7,7,16,16,16,16,16,16,16,16,16,16,7,16,16,16,16,7,16,16,16,16,16,16,16,16,16,16,16,16,16,16,7,16,16,16,16,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,
	7,16,16,16,16,16,16,16,8,8,16,16,11,16,11,16,11,11,11,11,11,11,11,11,11,11,8,8,16,16,16,16,16,11,12,12,12,11,10,12,12,4,10,12,10,15,12,13,11,13,12,12,10,12,11,16,10,10,10,8,16,8,8,16,8,9,10,9,10,9,5,9,10,4,4,10,4,15,10,10,10,10,6,9,5,10,8,12,8,8,8,8,16,8,16,8,8,7,7,7,7,7,9,8,7,8,8,8,8,8,7,8,10,10,9,10,10,10,9,10,9,10,9,11,9,10,10,9,9,10,10,10,7,10,10,9,10,8,10,8,9,10,10,10,7,11,8,10,11,10,8,9,8,11,9,9,9,9,4,4,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,16,16,16,16,16,16,16,7,8,8,8,8,8,8,8,7,7,7,7,7,7,7,7,7,7,7,7,7,16,7,7
	],
];
var CHARREF_TABLE = {
	"&quot;" : "&#34;",
	"&amp;" : "&#38;",
	"&apos;" : "&#39;",
	"&lt;" : "&#60;",
	"&gt;" : "&#62;",
	"&nbsp;" : "&#160;",
	"&iexcl;" : "&#161;",
	"&cent;" : "&#162;",
	"&pound;" : "&#163;",
	"&curren;" : "&#164;",
	"&yen;" : "&#165;",
	"&brvbar;" : "&#166;",
	"&sect;" : "&#167;",
	"&uml;" : "&#168;",
	"&copy;" : "&#169;",
	"&ordf;" : "&#170;",
	"&laquo;" : "&#171;",
	"&not;" : "&#172;",
	"&shy;" : "&#173;",
	"&reg;" : "&#174;",
	"&macr;" : "&#175;",
	"&deg;" : "&#176;",
	"&plusmn;" : "&#177;",
	"&sup2;" : "&#178;",
	"&sup3;" : "&#179;",
	"&acute;" : "&#180;",
	"&micro;" : "&#181;",
	"&para;" : "&#182;",
	"&middot;" : "&#183;",
	"&cedil;" : "&#184;",
	"&sup1;" : "&#185;",
	"&ordm;" : "&#186;",
	"&raquo;" : "&#187;",
	"&frac14;" : "&#188;",
	"&frac12;" : "&#189;",
	"&frac34;" : "&#190;",
	"&iquest;" : "&#191;",
	"&Agrave;" : "&#192;",
	"&Aacute;" : "&#193;",
	"&Acirc;" : "&#194;",
	"&Atilde;" : "&#195;",
	"&Auml;" : "&#196;",
	"&Aring;" : "&#197;",
	"&AElig;" : "&#198;",
	"&Ccedil;" : "&#199;",
	"&Egrave;" : "&#200;",
	"&Eacute;" : "&#201;",
	"&Ecirc;" : "&#202;",
	"&Euml;" : "&#203;",
	"&Igrave;" : "&#204;",
	"&Iacute;" : "&#205;",
	"&Icirc;" : "&#206;",
	"&Iuml;" : "&#207;",
	"&ETH;" : "&#208;",
	"&Ntilde;" : "&#209;",
	"&Ograve;" : "&#210;",
	"&Oacute;" : "&#211;",
	"&Ocirc;" : "&#212;",
	"&Otilde;" : "&#213;",
	"&Ouml;" : "&#214;",
	"&times;" : "&#215;",
	"&Oslash;" : "&#216;",
	"&Ugrave;" : "&#217;",
	"&Uacute;" : "&#218;",
	"&Ucirc;" : "&#219;",
	"&Uuml;" : "&#220;",
	"&Yacute;" : "&#221;",
	"&THORN;" : "&#222;",
	"&szlig;" : "&#223;",
	"&agrave;" : "&#224;",
	"&aacute;" : "&#225;",
	"&acirc;" : "&#226;",
	"&atilde;" : "&#227;",
	"&auml;" : "&#228;",
	"&aring;" : "&#229;",
	"&aelig;" : "&#230;",
	"&ccedil;" : "&#231;",
	"&egrave;" : "&#232;",
	"&eacute;" : "&#233;",
	"&ecirc;" : "&#234;",
	"&euml;" : "&#235;",
	"&igrave;" : "&#236;",
	"&iacute;" : "&#237;",
	"&icirc;" : "&#238;",
	"&iuml;" : "&#239;",
	"&eth;" : "&#240;",
	"&ntilde;" : "&#241;",
	"&ograve;" : "&#242;",
	"&oacute;" : "&#243;",
	"&ocirc;" : "&#244;",
	"&otilde;" : "&#245;",
	"&ouml;" : "&#246;",
	"&divide;" : "&#247;",
	"&oslash;" : "&#248;",
	"&ugrave;" : "&#249;",
	"&uacute;" : "&#250;",
	"&ucirc;" : "&#251;",
	"&uuml;" : "&#252;",
	"&yacute;" : "&#253;",
	"&thorn;" : "&#254;",
	"&yuml;" : "&#255;",
	"&OElig;" : "&#338;",
	"&oelig;" : "&#339;",
	"&Scaron;" : "&#352;",
	"&scaron;" : "&#353;",
	"&Yuml;" : "&#376;",
	"&fnof;" : "&#402;",
	"&circ;" : "&#710;",
	"&tilde;" : "&#732;",
	"&Alpha;" : "&#913;",
	"&Beta;" : "&#914;",
	"&Gamma;" : "&#915;",
	"&Delta;" : "&#916;",
	"&Epsilon;" : "&#917;",
	"&Zeta;" : "&#918;",
	"&Eta;" : "&#919;",
	"&Theta;" : "&#920;",
	"&Iota;" : "&#921;",
	"&Kappa;" : "&#922;",
	"&Lambda;" : "&#923;",
	"&Mu;" : "&#924;",
	"&Nu;" : "&#925;",
	"&Xi;" : "&#926;",
	"&Omicron;" : "&#927;",
	"&Pi;" : "&#928;",
	"&Rho;" : "&#929;",
	"&Sigma;" : "&#931;",
	"&Tau;" : "&#932;",
	"&Upsilon;" : "&#933;",
	"&Phi;" : "&#934;",
	"&Chi;" : "&#935;",
	"&Psi;" : "&#936;",
	"&Omega;" : "&#937;",
	"&alpha;" : "&#945;",
	"&beta;" : "&#946;",
	"&gamma;" : "&#947;",
	"&delta;" : "&#948;",
	"&epsilon;" : "&#949;",
	"&zeta;" : "&#950;",
	"&eta;" : "&#951;",
	"&theta;" : "&#952;",
	"&iota;" : "&#953;",
	"&kappa;" : "&#954;",
	"&lambda;" : "&#955;",
	"&mu;" : "&#956;",
	"&nu;" : "&#957;",
	"&xi;" : "&#958;",
	"&omicron;" : "&#959;",
	"&pi;" : "&#960;",
	"&rho;" : "&#961;",
	"&sigmaf;" : "&#962;",
	"&sigma;" : "&#963;",
	"&tau;" : "&#964;",
	"&upsilon;" : "&#965;",
	"&phi;" : "&#966;",
	"&chi;" : "&#967;",
	"&psi;" : "&#968;",
	"&omega;" : "&#969;",
	"&thetasym;" : "&#977;",
	"&upsih;" : "&#978;",
	"&piv;" : "&#982;",
	"&ensp;" : "&#8194;",
	"&emsp;" : "&#8195;",
	"&thinsp;" : "&#8201;",
	"&zwnj;" : "&#8204;",
	"&zwj;" : "&#8205;",
	"&lrm;" : "&#8206;",
	"&rlm;" : "&#8207;",
	"&ndash;" : "&#8211;",
	"&mdash;" : "&#8212;",
	"&lsquo;" : "&#8216;",
	"&rsquo;" : "&#8217;",
	"&sbquo;" : "&#8218;",
	"&ldquo;" : "&#8220;",
	"&rdquo;" : "&#8221;",
	"&bdquo;" : "&#8222;",
	"&dagger;" : "&#8224;",
	"&Dagger;" : "&#8225;",
	"&bull;" : "&#8226;",
	"&hellip;" : "&#8230;",
	"&permil;" : "&#8240;",
	"&prime;" : "&#8242;",
	"&Prime;" : "&#8243;",
	"&lsaquo;" : "&#8249;",
	"&rsaquo;" : "&#8250;",
	"&oline;" : "&#8254;",
	"&frasl;" : "&#8260;",
	"&euro;" : "&#8364;",
	"&image;" : "&#8465;",
	"&weierp;" : "&#8472;",
	"&real;" : "&#8476;",
	"&trade;" : "&#8482;",
	"&alefsym;" : "&#8501;",
	"&larr;" : "&#8592;",
	"&uarr;" : "&#8593;",
	"&rarr;" : "&#8594;",
	"&darr;" : "&#8595;",
	"&harr;" : "&#8596;",
	"&crarr;" : "&#8629;",
	"&lArr;" : "&#8656;",
	"&uArr;" : "&#8657;",
	"&rArr;" : "&#8658;",
	"&dArr;" : "&#8659;",
	"&hArr;" : "&#8660;",
	"&forall;" : "&#8704;",
	"&part;" : "&#8706;",
	"&exist;" : "&#8707;",
	"&empty;" : "&#8709;",
	"&nabla;" : "&#8711;",
	"&isin;" : "&#8712;",
	"&notin;" : "&#8713;",
	"&ni;" : "&#8715;",
	"&prod;" : "&#8719;",
	"&sum;" : "&#8721;",
	"&minus;" : "&#8722;",
	"&lowast;" : "&#8727;",
	"&radic;" : "&#8730;",
	"&prop;" : "&#8733;",
	"&infin;" : "&#8734;",
	"&ang;" : "&#8736;",
	"&and;" : "&#8743;",
	"&or;" : "&#8744;",
	"&cap;" : "&#8745;",
	"&cup;" : "&#8746;",
	"&int;" : "&#8747;",
	"&there4;" : "&#8756;",
	"&sim;" : "&#8764;",
	"&cong;" : "&#8773;",
	"&asymp;" : "&#8776;",
	"&ne;" : "&#8800;",
	"&equiv;" : "&#8801;",
	"&le;" : "&#8804;",
	"&ge;" : "&#8805;",
	"&sub;" : "&#8834;",
	"&sup;" : "&#8835;",
	"&nsub;" : "&#8836;",
	"&sube;" : "&#8838;",
	"&supe;" : "&#8839;",
	"&oplus;" : "&#8853;",
	"&otimes;" : "&#8855;",
	"&perp;" : "&#8869;",
	"&sdot;" : "&#8901;",
	"&lceil;" : "&#8968;",
	"&rceil;" : "&#8969;",
	"&lfloor;" : "&#8970;",
	"&rfloor;" : "&#8971;",
	"&lang;" : "&#9001;",
	"&rang;" : "&#9002;",
	"&loz;" : "&#9674;",
	"&spades;" : "&#9824;",
	"&clubs;" : "&#9827;",
	"&hearts;" : "&#9829;",
	"&diams;" : "&#9830;",
};

function UnicodeCharToDot(byteCode)
{
	if (typeof byteCode == 'string' || byteCode instanceof String) {
		if (byteCode.length > 1) {
			var tmp = parseInt(byteCode);		// '0xFFFF'
			if (tmp) {
				byteCode = tmp;
			} else {
				tmp = CHARREF_TABLE[byteCode];	// '&amp;'
				if (tmp != undefined) {
					byteCode = tmp;
				}
				byteCode = byteCode.toUpperCase();
				if (byteCode.match(/^&#([0-9]+);/)) {	// '&#65535;'
					byteCode = parseInt(RegExp.$1);
				} else if (byteCode.match(/^&#X([0-9A-F]+);/)) {	// '&#xFFFF;'
					byteCode = parseInt(RegExp.$1, 16);
				}
			}
		} else {
			byteCode = byteCode.charCodeAt(0);		// simple character
		}
	}
	if ((!byteCode) || (byteCode < 0 && byteCode > 65535)) { return 0; }
	if (byteCode < 13312) {
		return UNICODE_DOTS[0][byteCode];
	} else if (byteCode >= 42125 && byteCode < 43128) {
		return UNICODE_DOTS[1][byteCode - 42125];
	} else if (byteCode >= 59244 && byteCode < 59493) {
		return UNICODE_DOTS[2][byteCode - 59244];
	} else if (byteCode >= 63744) {
		return UNICODE_DOTS[3][byteCode - 63744];
	} else if ((byteCode >= 13312 && byteCode < 19894) ||
			(byteCode >= 19968 && byteCode < 40892) ||
			(byteCode >= 44032 && byteCode < 55204)) {
		return 16;
	} else if ((byteCode >= 19894 && byteCode < 19968) ||
			(byteCode >= 40892 && byteCode < 40960) ||
			(byteCode >= 43128 && byteCode < 44032) ||
			(byteCode >= 55204 && byteCode < 57344)) {
		return 7;
	} else if ((byteCode >= 40960 && byteCode < 42125)) {
		return 11;
	} else if ((byteCode >= 57344 && byteCode < 59244) ||
			(byteCode >= 59493 && byteCode < 63744)) {
		return 8;
	}
	return 0;
	//return UNICODE_DOTS[byteCode];
}

function UnicodeStrToDot(str)
{
	var dot = 0;
	while (/(&[^;]+;|.)/g.exec(str)) {
		var s = RegExp.$1;
		var n = UnicodeCharToDot(RegExp.$1);
		dot += n
	}
	return dot;
}

function CharToDot(c)
{
	var dot = 16;
	for (var i = 0; i < CHARDOTS.length; i++) {
		if (CHARDOTS[i].indexOf(c) != -1) { 
			dot = i;
			break;
		}
	}
	return dot;
}
function StrToDot(str)
{
	var dot = 0;
	for (var i = 0; i < str.length; i++) {
		dot += CharToDot(str.charAt(i));
	}
	return dot;
}
function StrToDotEx(str)
{
	var dot = 0;
	while (/(&[^;]+;|.)/g.exec(str)) {
		var s = RegExp.$1;
		if (s.length > 1) {
			dot += UnicodeCharToDot(s);
		} else {
			dot += CharToDot(s);
		}
	}
	return dot;
}

/* [flags]
   LEFT  : ゴミ(コンマなど)を左側に寄せる 
   RIGHT : ゴミ(コンマなど)を右側に寄せる
   HEAD  : 文頭の半角スペースをアンダー( _ )に置換する
   TAIL  : 文末の半角スペースをアンダー( _ )に置換する
*/
function makeSpace(dot, align)
{
	if (arguments.length > 2 && arguments[2] == true) {
		return makeSpaceRefUse(dot, align);
	}
	if (dot <= 0) { return ''; }
	var zenSpace = Math.floor(dot / 11);
	var amari = dot % 11;
	var ret = '';
	/* use character 「､._ 　」 */
	switch (amari) {
		case 10 : 
			// if (zenSpace <= 0) { ret = " _"; }
			if (zenSpace <= 0) { ret = ".. "; }
			else if (zenSpace == 1) { ret = " 　 "; }
			else if (zenSpace == 2) { ret = "　 　 "; }
			else {
				ret = "　 　 ";
				zenSpace -= 2;
				while (zenSpace--) { ret += "　"; }
			}
			break;
		case 9 :
			ret = "...";
			while (zenSpace--) { ret += "　"; }
			break;
		case 8 :
			if (zenSpace <= 0) { ret = ". "; }
			else {
				ret = ". ";
				while (zenSpace--) { ret += "　"; }
			}
			break;
		case 7 :
			// if (zenSpace <= 0) { ret = "､"; }
			if (zenSpace <= 0) { ret = ". "; }
			/* ret = " _. "; */
			else if (zenSpace == 1) { ret = "......"; }
			else if (zenSpace == 2) { ret = "......　";  }
			else if (zenSpace == 3) { ret = "......　　"; }
			else {
				ret = ". 　 　 ";
				zenSpace -= 3;
				while (zenSpace--) { ret += "　"; }
			}
			break;
		case 6 :
			ret = "..";
			while (zenSpace--) { ret += "　"; }
			break;
		case 5 :
			if (zenSpace <= 0) { ret = " "; }
			else if (zenSpace == 1) { ret = "　 "; }
			else {
				ret = "　 ";
				zenSpace -= 1;
				while (zenSpace--) { ret += "　"; }
			}
			break;
		case 4 :
			// over + 1
			if (zenSpace <= 0) { ret = " ";/*ret = "ﾞ";*/ }
			// ret = " _ ";
			else if (zenSpace == 1) { ret = ".....";  }
			else if (zenSpace == 2) { ret = ".....　"; }
			else if (zenSpace == 3) { ret = ".....　　"; }
			else if (zenSpace == 4) { ret = ".....　　　"; }
			else {
				ret = "　 　 　 ";
				zenSpace -= 4;
				while (zenSpace--) { ret += "　"; }
			}
			break;
		case 3 :
			ret = ".";
			while (zenSpace--) { ret += "　"; }
			break;
		case 2 :
			if (zenSpace <= 0) {
				// 不可能
				ret = ".";		// over +1
			} else if (zenSpace == 1) { ret = " . "; }
			else if (zenSpace == 2) { ret = " . 　"; }
			else {
				ret = ". 　 ";
				zenSpace -= 2;
				var testnum = 100;
				while (zenSpace--) { ret += "　"; }
			}
			break;
		case 1 :
			if (zenSpace <= 0) {
				// 不可能
				ret = ".";		// over +2
			} else {
				ret = "....";
				zenSpace -= 1;
				while (zenSpace--) { ret += "　"; }
			}
			break;
		default :
			while (zenSpace--) { ret += "　"; }
			break;
	}
	if ((align & RIGHT) > 0) {
		ret = ret.split('').reverse().join('');
	}
	if (((align & HEAD) > 0) && (ret.charAt(0) == ' ')) {
		ret = '_' + ret.substring(1);
	}
	if (((align & TAIL) > 0) && (ret.charAt(ret.length - 1) == ' ')) {
		ret = ret.substring(0, ret.length - 1) + '_';
	}
	return ret;
}

function makeSpaceRefUse(dot, align)
{
	if (dot <= 0) { return ''; }
	var zenSpace = Math.floor(dot / 11);
	var amari = dot % 11;
	var ret = '';
	switch (amari) {
		case 10 : 
			if (zenSpace <= 0) { ret = ' &#160;'; }
			else if (zenSpace == 1) { ret = ' 　 '; }
			else { 
				ret = '　 　 ';
				zenSpace -= 2;
				while (zenSpace--) { ret += "　"; }
			}
			break;
		case 9 :
			if (zenSpace <= 0) { ret = " &#8197;"; }
			else { 
				ret = "　 &#8197;";
				zenSpace--;
				while (zenSpace--) { ret += "　"; }
			}
			break;
		case 8 :
			if (zenSpace <= 0) { ret = " &#8198;"; }
			else { 
				ret = "　 &#8198;";
				zenSpace--;
				while (zenSpace--) { ret += "　"; }
			}
			break;
		case 7 :
			if (zenSpace <= 0) { ret = " &#8201;"; }
			else { 
				ret = "　 &#8201;";
				zenSpace--;
				while (zenSpace--) { ret += "　"; }
			}
			break;
		case 6 :
			if (zenSpace <= 0) { ret = " &#8202;"; }
			else { 
				ret = "　 &#8202;";
				zenSpace--;
				while (zenSpace--) { ret += "　"; }
			}
			break;
		case 5 :
			if (zenSpace <= 0) { ret = " "; }
			else {
				ret = "　 ";
				zenSpace--;
				while (zenSpace--) { ret += "　"; }
			}
			break;
		case 4 :
			ret = '&#8197;';
			while (zenSpace--) { ret += "　"; }
			break;
		case 3 :
			ret = '&#8198;';
			while (zenSpace--) { ret += "　"; }
			break;
		case 2 :
			ret = '&#8201;';
			while (zenSpace--) { ret += "　"; }
			break;
		case 1 :
			ret = '&#8202;';
			while (zenSpace--) { ret += "　"; }
			break;
		default :
			while (zenSpace--) { ret += "　"; }
			break;
	}
	if (((align & HEAD) > 0) && (ret.charAt(0) == ' ')) {
		ret = '&#160;' + ret.substring(1);
	}
	if (((align & TAIL) > 0) && (ret.charAt(ret.length - 1) == ' ')) {
		ret = ret.substring(0, ret.length - 1) + '&#160;';
	}
	return ret;
}

function KeisenObject()
{
	this.text = '';
}

var KeisenRule = {
	DefineHorizontalLine : function(cell, hAlign, isBold) {
		var base = '';
		if (!cell.mergeLinks[hAlign]) {
			if (cell[hAlign]) {
				if (isBold) {
					base = '━';	/* ヘッダー隣接セルの上 */
				} else {
					base = '─';	/* 内枠でセルの上 */
				}
			} else {
				base = '━';	/* 外枠でセルの上 */
			}
		}
		return base;
	},
	DefineVerticalLine : function(cell, vAlign, isBold) {
		var base = '';
		if (!cell.mergeLinks[vAlign]) {
			if (cell[vAlign]) {
				if (isBold) {
					base = '┃';	/* 内枠でセルの左(区切り線) */
				} else {
					base = '│';	/* 内枠でセルの左(区切り線) */
				}
			} else {
				base = '┃';	/* 外枠左端のセルの左 */
			}
		}
		return base;
	},
	ReverseTable : [
		'┏┓┗┛','┌┐└┘',
		'┣┫','┠┨','┝┥','├┤',
		'┳┻','┯┷','┰┸','┬┴'
	],
	ReverseCornerString : function(text, hReverse, vReverse) {
		for (var i = 0; i < this.ReverseTable.length; i++) {
			var idx = this.ReverseTable[i].indexOf(text);
			if (idx >= 0) {
				if (i < 2) { return this.ReverseTable[i][(vReverse << 1) + hReverse]; }
				else if (i >= 2 && i < 6) {
					return this.ReverseTable[i][idx ^ hReverse];
				} else {
					return this.ReverseTable[i][idx ^ vReverse];
				}
			}
		}
		return text;
	},
	DefineCorner : function(cell, hAlign, vAlign, isBold) {
		var base = '';
		var hReverse = (hAlign == 'right')? 1 : 0;
		var vReverse = (vAlign == 'bottom')? 1 : 0;
		
		/* 左上用のみ定義してあとは反転させる */
		var str = ['┿','┼','┯','┣','┠','┏'];
		if (cell.mergeLinks[hAlign]) {
			if (cell.mergeLinks[vAlign]) {
				return '';
			} else if (cell[vAlign] && cell[vAlign].mergeLinks[hAlign]) {
				str.splice(0, 3, '━','─','━');
			} else {
				str.splice(0, 3, '┷','┴','━');
			}
		} else {
			if (cell.mergeLinks[vAlign]) {
				if (cell[hAlign] && cell[hAlign].mergeLinks[vAlign]) {
					str.splice(0, 5, '│','│','┯','┃','┃');
				} else {
					str.splice(0, 5, '┥','┤','┯','┃','┃');
				}
			} else if (cell[hAlign] && cell[hAlign].mergeLinks[vAlign]) {
				str.splice(0, 2, '┝','├');
			} else if (cell[vAlign] && cell[vAlign].mergeLinks[hAlign]) {
				str.splice(0, 2, '┯','┬');
			}
		}
		if (cell[hAlign]) {
			if (cell[vAlign]) {
				if (isBold) {
					base = str[0];	/* 内枠ヘッダー隣接のセルの左上 */
				} else {
					base = str[1];	/* 内枠でセルの左上 */
				}
			} else {
				base = str[2];	/* 外枠でセルの左上 */
			}
		} else {
			if (cell[vAlign]) {
				if (isBold) {
					base = str[3];	/* 外枠左端ヘッダー隣接のセルの左上 */
				} else {
					base = str[4];	/* 外枠左端のセルの左上 */
				}
			} else {
				base = str[5];		/* 外枠左上端の角 */
			}
		}
		return this.ReverseCornerString(base, hReverse, vReverse);
	},
	Top : function(cell) {
		return this.DefineHorizontalLine(cell, 'top', (cell.top && (cell.top.header || cell.footer || cell.top.nextline)));
	},
	Left : function(cell) {
		return this.DefineVerticalLine(cell, 'left', false);
	},
	Right : function(cell) {
		return this.DefineVerticalLine(cell, 'right', false);
	},
	Bottom : function(cell) {
		return this.DefineHorizontalLine(cell, 'bottom', (cell.bottom && (cell.header || cell.bottom.footer || cell.nextline)));
	},
	LeftTop : function(cell) {
		return this.DefineCorner(cell, 'left', 'top', (cell.top && (cell.top.header || cell.footer || cell.top.nextline)));
	},
	RightTop : function(cell) {
		return this.DefineCorner(cell, 'right', 'top', (cell.top && (cell.top.header || cell.footer || cell.top.nextline)));
	},
	LeftBottom : function(cell) {
		return this.DefineCorner(cell, 'left', 'bottom', (cell.bottom && (cell.header || cell.bottom.footer || cell.nextline)));
	},
	RightBottom : function(cell) {
		return this.DefineCorner(cell, 'right', 'bottom', (cell.bottom && (cell.header || cell.bottom.footer || cell.nextline)));
	},
	MergeMove : function(ltCell) {
		if (!ltCell.isMergeable ) { return false; }
		var cell = ltCell;
		var lines = 1;
		var w = 0;
		if (ltCell.mergeLinks.right) {
			while (cell.mergeLinks.right) {
				w += cell.width + 16;
				cell.width = 0;
				cell = cell.mergeLinks.right;
				cell.mergeLinks.left.mergeLinks.right = null;
				cell.mergeLinks.left = null;
			}
			
			// 結合によるセル幅の再計算
			var max = 0;
			var coltmp = cell;
			while (coltmp = coltmp.top) { 
				if (coltmp.rawText.textDots > max) 
					max = coltmp.rawText.textDots;
				if (!coltmp.top)
					break;
			}
			var tmp = cell;
			while (tmp = tmp.bottom) { if (tmp.rawText.textDots > max) max = tmp.rawText.textDots; }
			if (cell.textDots > max) {
				var num = Math.floor((cell.textDots - max) >> 4);
				var cbk = num << 4;
				var lbk = Math.floor(w >> 4) << 4;
				if (cbk > lbk) {
					cbk = lbk;
				}
				tmp = coltmp;
				var n;
				do {
					n = tmp.keisenLinks.top.text;
					tmp.keisenLinks.top.text = n.substr(0, n.length - num);
					if (tmp === cell) { continue; }
					tmp.width -= cbk;
					if (!tmp.bottom) break;
				} while (tmp = tmp.bottom);
				n = tmp.keisenLinks.bottom.text;
				tmp.keisenLinks.bottom.text = n.substr(0, n.length - num);
				w -= cbk;
			}
			
			cell.width = w = cell.width + w;
			tmp = cell;
			while (tmp = tmp.mergeLinks.bottom) {
				lines += 2;
				tmp.keisenLinks.top.text = makeSpace(w, LEFT, USE_UNICODE);
				tmp.width = w;
				var tmp2 = tmp;
				while (tmp2.mergeLinks.left && tmp2.left.mergeLinks.top) {
					tmp2 = tmp2.left;
					tmp2.width = 0;
					tmp2.mergeLinks.top.mergeLinks.bottom = null;
					tmp2.mergeLinks.top = null;
					tmp2.mergeLinks.right.mergeLinks.left = null;
					tmp2.mergeLinks.right = null;
				}
				tmp.mergeLinks.top.mergeLinks.bottom = null;
				tmp.mergeLinks.top = null;
			}
			// 結合セルの上下の中央に文字列を移動させる。　+1で4の倍数ならkeisenLinks.topに書き込む(奇数セル単位行)、それ以外はtext
			var idx = Math.floor((lines + 1) / 4);
			if (idx > 0) {
				tmp = cell;
				while (idx--) { tmp = tmp.bottom; }
				if ((lines + 1) % 4 == 0) {
					tmp.keisenLinks.top.text = cell.getPaddingText();
				} else {
					tmp.text = cell.text;
				}
				if (cell != tmp) {
					cell.text = '';
				}
			}
		} else if (ltCell.mergeLinks.bottom) {
			var tmp = cell;
			w = cell.width;
			while (tmp = tmp.mergeLinks.bottom) {
				lines += 2;
				tmp.keisenLinks.top.text = makeSpace(w, LEFT, USE_UNICODE);
				tmp.width = w;
				tmp.mergeLinks.top.mergeLinks.bottom = null;
				tmp.mergeLinks.top = null;
			}
			var idx = Math.floor((lines + 1) / 4);
			if (idx > 0) {
				tmp = cell;
				while (idx--) { tmp = tmp.bottom; }
				if ((lines + 1) % 4 == 0) {
					tmp.keisenLinks.top.text = cell.getPaddingText();
				} else {
					tmp.text = cell.text;
				}
				if (cell != tmp) {
					cell.text = '';
				}
			}
		}

		return true;
	},
	detectWidthCellsForBorder : function(cell, width) {
		if (!cell) { return -1; }
		do { if (!cell.top) { break; } } while (cell = cell.top);
		var tmp = cell;
		var overDots = 0;
		do {
			tmp = cell;
			if (overDots) {
				width += overDots;
				overDots = 0;
			}
			for (; tmp; tmp = tmp.bottom) {
				tmp.width = width;
				if (tmp.overDots) {
					overDots = 16;
					break;
				}
			}
		} while(overDots > 0);
		return width;
	}
};

function Padding()
{
	var that = this;
	var _overDots = 0;
	var _text = '';
	var _width = 0;
	var _align = LEFT;
	this.__defineGetter__("isOver", function() { return (_overDots > 0)? true : false; });
	this.__defineGetter__("overLength", function() { return _overDots; });
	this.setText = function(len, align) {
		if (len < 0) { len = 0; }
		_align = align;
		_text = makeSpace(len, align, USE_UNICODE);
		_width = len;
		_overDots = StrToDotEx(_text) - len;
	};
	this.getText = function() { return _text; }
	this.__defineGetter__("align", function() { return _align; });
	this.__defineSetter__("align", function(in_align) {
		this.setText(_width, in_align);
	});
	this.__defineGetter__("width", function() { return _width; });
	this.__defineSetter__("width", function(in_width) {
		this.setText(in_width, _align);
	});
	this.AcceptOverDots = function() {
		_width += _overDots;
		_overDots = 0;
	};
}

function RawText(text)
{
	var that = this;
	var _text, _dots;
	this.paddingLeft = new Padding();
	this.paddingRight= new Padding();
	this.__defineGetter__("text", function() { return _text; });
	this.__defineSetter__("text", function(val) {
		_text = val;
		_dots = StrToDotEx(_text);
	});
	this.__defineGetter__("overDots", function() { return (that.paddingLeft.overLength + that.paddingRight.overLength); });
	this.__defineGetter__("textDots", function() { return _dots; });
	this.__defineGetter__("width", function() { return that.paddingLeft.width + that.textDots + that.paddingRight.width; });
	this.calcPadding = function(val, align) {
		var len = val - that.textDots;
		switch (align) {
			case LEFT :
				that.paddingLeft.width = 0;
				if (len <= 0) {
					val = that.textDots;
					that.paddingRight.width = 0;
				} else {
					that.paddingRight.width = len;
				}
				break;
			case RIGHT :
				that.paddingRight.width = 0;
				if (len <= 0) {
					val = that.textDots;
					that.paddingLeft.width = 0;
				} else {
					that.paddingLeft.width = len;
				}
				break;
			case CENTER :
				if (len <= 0) { 
					val = that.textDots;
					that.paddingLeft.width = that.paddingRight.width = 0;
				} else {
					var len2 = Math.floor(len / 2);
					that.paddingLeft.width = len2;
					if ((len % 2) == 1) len2++;
					that.paddingRight.width = len2;
				}
				break;
			default:
				break;
		}
		return val;
	};
	this.getPaddingText = function() {
		return that.paddingLeft.getText() + that.text + that.paddingRight.getText();
	};

	that.text = text;
}

function RawTextCollection()
{
	var that = this;
	var _raws = [];
	this.setText = function(text, width, align) {
		_raws = [];
		var tmp = text.split('&br;');
		for (var i = 0; i < tmp.length; i++) {
			_raws.push(new RawText(tmp[i]));
		}
		return that.calcPadding(width, align);
	};
	this.getText = function() {
		var idx = 0;
		if (arguments[0] !== undefined) {
			idx = arguments[0];
		}
		if (idx >= that.length) { return 'ERROR'; }
		return _raws[idx];
	}
	this.__defineGetter__("length", function() {
		return _raws.length;
	});
	this.__defineSetter__("leftAlign", function(val) {
		for (var i = 0; i < that.length; i++) {
			that.getText(i).paddingLeft.align = val;
		}
	});
	this.__defineSetter__("rightAlign", function(val) {
		for (var i = 0; i < that.length; i++) {
			that.getText(i).paddingRight.align = val;
		}
	});
	this.__defineGetter__("overDots", function() {
		var nmax = 0;
		for (var i = 0; i < that.length; i++) {
			if (that.getText(i).overDots > nmax)
				nmax = that.getText(i).overDots;
		}
		return nmax;
	});
	this.getTextDots = function() {
		return that.getText(arguments[0]).textDots;
	};
	this.getPaddingText = function() {
		return that.getText(arguments[0]).getPaddingText();
	};
	this.calcPadding = function(width, align) {
		for (var i = 0; i < that.length; i++) {
			var w = that.getText(i).calcPadding(width, align);
			if (w > width) {
				width = w;
				i = -1;
				continue;
			}
		}
		return width;
	};
}

function Cell(value)
{
	var that = this;
	var _rawTextCollection = new RawTextCollection();
	var _width = 0;
	var _align = LEFT;
	var  _nextline = false;
	this.header = false;
	this.footer = false;
	this.borderStyle = 0;		// 0～1 = なし、 2以降 = +---+ or ┼─┼ or ╋━╋

	this.getRawText = function() { return _rawTextCollection.getText(arguments[0]); };
	this.__defineGetter__("rawText", function() { return that.getRawText(); });
	this.getText = function() { return that.getRawText(arguments[0]).text; };
	this.__defineGetter__("text", function() { return that.rawText.text; });
	// rawText セッターはKeisenRule.MergeMove()時のみ使用すること(タイミングによってはoverdotsが出てレイアウト崩れるケースがある)
	this.__defineSetter__("text", function(val) {
		that.width = _rawTextCollection.setText(val, that.width, that.align);
	});
	this.__defineGetter__("lineCount", function() { return _rawTextCollection.length; });

	this.__defineGetter__("overDots", function() { return _rawTextCollection.overDots; });
	this.__defineGetter__("textDots", function() { return _rawTextCollection.getTextDots(); });
	this.setWidthRestore = function(rtcObj, diff) {
		if (rtcObj && (rtcObj instanceof RawTextCollection)) {
			_width += diff;
		}
	};
	this.__defineGetter__("width", function() { return _width; });
	this.__defineSetter__("width", function(val) { _width = (_width != val) ? _rawTextCollection.calcPadding(val, that.align) : _width;});
	this.getPaddingText = function() { return that.getRawText(arguments[0]).getPaddingText(); };
	this.__defineGetter__("nextline", function() { return _nextline; });
	this.__defineSetter__("nextline", function(val) { if (!(that.header || that.footer)) { _nextline = val; } });
	this.__defineGetter__("align", function() { return _align; });
	this.__defineSetter__("align", function(val) {
		_align = val;
		if (_align == CENTER || _align == LEFT) {
			_rawTextCollection.leftAlign = ((!that.left) && (that.borderStyle < 2))? LEFT | HEAD : LEFT;
		}
		if (_align == CENTER || _align == RIGHT) {
			_rawTextCollection.rightAlign = ((!that.right) && (that.borderStyle < 2))? RIGHT | TAIL : RIGHT;
		}
	});
	/* linklist */
	this.cellLinks = { left: null, right: null, top: null, bottom: null };
	this.__defineGetter__("left", function() { return that.cellLinks.left; });
	this.__defineGetter__("top", function() { return that.cellLinks.top; });
	this.__defineGetter__("right", function() { return that.cellLinks.right; });
	this.__defineGetter__("bottom", function() { return that.cellLinks.bottom; });
	this.__defineSetter__("left", function(val) { that.cellLinks.left = val; });
	this.__defineSetter__("top", function(val) { that.cellLinks.top = val; });
	this.__defineSetter__("right", function(val) { that.cellLinks.right = val; });
	this.__defineSetter__("bottom", function(val) { that.cellLinks.bottom = val; });
	this.mergeLinks = { left: null, right: null, top: null, bottom: null };
	this.__defineGetter__("isMergeable", function() { return (this.mergeLinks.left || this.mergeLinks.top || this.mergeLinks.right || this.mergeLinks.bottom); });
	this.keisenLinks = {
		leftTop: null, top: null, rightTop: null,
		left: null, right: null,
		leftBottom: null, bottom: null, rightBottom: null
	};

	that.text = value;
}


var tablemaker = {
	text : '',
	maxwidth : 0,
	minwidth :16, // まだ未使用
	maxwidthColumn : [],
	
	// 実行メイン
	make : function(text, borderStyle) {
		this.text = text;
		this.maxwidth = 0;
		this.minwidth = 16;
		this.maxwidthColumn = [];
		var ret = '';
		switch (borderStyle) {
			case 0 :
				ret = this.makeSpaceTable(11);
				break;
			case 1 :
				ret = this.makeSeparatorTable(SEPARATOR);
				break;
			case 4 :
			case 41:
				ret = this.makeBorderTable();
				break;
			default :
				ret = this.makeSpaceTable(11);
				break;
		}
		return ret;
	},
	// 罫線を使用したテーブル
	makeBorderTable : function() {
		var rule = KeisenRule;
		var ret = '';
		var cells = this.convCells(this.text, 21);
		var cwmax = []
		for (var i = 0; i < this.maxwidthColumn.length; i++) {
			cwmax.push(((this.maxwidthColumn[i] + 15) >> 4) << 4);	// 罫線が16dotなので16の倍数にする
		}
		if (cells && cells.length > 0 && cells[0] && cells[0].length > 0) {
			// 文字ドット数の余剰分カラムサイズを補正する
			for (var col = 0; col < cwmax.length; col++) {
				cwmax[col] = rule.detectWidthCellsForBorder(cells[0][col], cwmax[col]);
			}

			// 罫線の作成
			for (var row = 0; row < cells.length; row++) {
				for (var col = 0; col < cwmax.length; col++) {
					var item = cells[row][col];
					item.keisenLinks.leftTop.text = rule.LeftTop(item);
					item.keisenLinks.left.text = rule.Left(item);
					var c = rule.Top(item);
					var t = cwmax[col];
					do { item.keisenLinks.top.text += c; } while (t -= 16);
					if (!item.right) {
						item.keisenLinks.rightTop.text = rule.RightTop(item);
						item.keisenLinks.right.text = rule.Right(item);
					}
					if (!item.bottom) {
						item.keisenLinks.leftBottom.text = rule.LeftBottom(item);
						c = rule.Bottom(item);
						t = cwmax[col];
						do { item.keisenLinks.bottom.text += c; } while (t -= 16);
						if (!item.right) {
							item.keisenLinks.rightBottom.text = rule.RightBottom(item);
						}
					}
				}
			}
			// 罫線を結合する
			for (var row = 0; row < cells.length; row++) {
				for (var col = 0; col < cwmax.length; col++) {
						rule.MergeMove(cells[row][col]);
				}
			}
			// 描画
			var t;
			for (var row = 0; row < cells.length; row++) {
				var tmpstr = '';
				t = cells[row][0];
				do {
					ret += t.keisenLinks.leftTop.text + t.keisenLinks.top.text;
					tmpstr += t.keisenLinks.left.text + t.getPaddingText();
				} while (t = t.right);
				t = cells[row][cwmax.length - 1];
				ret += t.keisenLinks.rightTop.text + '\n' + tmpstr + t.keisenLinks.right .text + '\n';
			}
			t = cells[cells.length - 1][0];
			do {
				ret += t.keisenLinks.leftBottom.text + t.keisenLinks.bottom.text;
			} while (t = t.right);
			t = cells[cells.length - 1][cwmax.length - 1];
			ret += t.keisenLinks.rightBottom.text;
		}
		return ret;
	},
	// 区切り文字を使用したテーブル
	makeSeparatorTable : function(separator) {
		var ret = '';
		var cells = this.convCells(this.text, 1);
		if (cells && cells.length > 0 && cells[0] && cells[0].length > 0) {
			for (var col = 0; col < cells[0].length; col++) {
				this.detectWidthCells(cells, col, this.maxwidthColumn[col]);
			}
			
			if (TAILCUT) {
				var endidx = cells[0].length - 1;
				for (var row = 0; row < cells.length; row++) {
					cells[row][endidx].rawText.paddingRight.width = 0;
				}
			}
			for (var row = 0; row < cells.length; row++) {
				for (var col = 0; col < cells[row].length; col++) {
					if (col != 0) ret += separator;
					ret += cells[row][col].getPaddingText();
				}
				ret += '\n';
			}
			ret = ret.substr(ret.length - 1, 1);	// 最終行の改行コード削除
		}
		return ret;
	},
	// 空白のみのコンパクトなテーブル
	makeSpaceTable : function(margin) {
		var ret = '';
		var cells = this.convCells(this.text, 0);
		var cwmax = []
		for (var i = 0; i < this.maxwidthColumn.length; i++) {
			cwmax.push(this.maxwidthColumn[i] + margin);		// marginのdot数分カラム幅を余裕を持たせる
		}
		if (cells && cells.length > 0 && cells[0] && cells[0].length > 0) {
			for (var col = 0; col < cells[0].length; col++) {
				var tmp = this.detectWidthCells(cells, col, cwmax[col]);
				// if (tmp >= 0) { cwmax[col] = tmp; }
			}
			// 各セルの向かい合ったPaddingを結合してゴミを出にくくする
			for (var row = 0; row < cells.length; row++) {
				for (var col = 0; col < cells[row].length; col++) {
					var item = cells[row][col];
					if (item.right && item.rawText.paddingRight.width > 0 && item.right.rawText.paddingLeft.width > 0) {
						item.right.rawText.paddingLeft.width += item.rawText.paddingRight.width;
						item.rawText.paddingRight.width = 0;
					}
					if (TAILCUT && (!item.right)) {
						item.rawText.paddingRight.width = 0;
					}
				}
			}
			// 描画
			for (var row = 0; row < cells.length; row++) {
				for (var col = 0; col < cells[row].length; col++) {
					ret += cells[row][col].getPaddingText();
				}
				ret += '\n';
			}
			ret = ret.substr(ret.length - 1, 1);	// 最終行の改行コード削除
		}
		return ret;
	},
	detectWidthCells : function(cells, columnIndex, width)
	{
		if (cells && cells.length > 0 && cells[0] && cells[0].length > columnIndex) {
			var overDots = 0;
			do {
				if (overDots) {
					width += overDots;
					overDots = 0;
				}
				for (var row = 0; row < cells.length; row++) {
					var item = cells[row][columnIndex];
					item.width = width;
					if (overDots < item.overDots) { 
						overDots = item.overDots;
					}
				}
			} while(overDots > 0);
			return width;
		}
		return -1;
	},
	convCells : function(text, borderStyle) {
		var rows = [];
		var lnArray = text.split('\n');
		for (var i = 0; i < lnArray.length; i++) {
			if (lnArray[i].length == 0) {
				lnArray.splice(i--, 1);
			}
		}
		var colNum = lnArray[0].split('|').length - 2;
		var aligns = new Array(colNum);
		this.maxwidthColumn = new Array(colNum);
		for (var i = 0; i < colNum; i++) {
			aligns[i] = LEFT;
			this.maxwidthColumn[i] = 0;
		}
		for (var i = 0; i < lnArray.length; i++) {
			var items = lnArray[i].split('|');
			var style = items[items.length - 1];
			var header = false;
			var footer = false;
			var nextline = false;
			if (style.length > 0) {
				if (style.match(/(h|f|b)/i)) {
					switch (RegExp.$1) {
						case 'h' : header = true; break;
						case 'f' : footer = true; break;
						case 'b' : nextline = true; break;
						default : break;
					}
					items[items.length - 1] = '';
				} else {
					if (style.match(/c/i)) {
						for (var j = 1; j < items.length - 1; j++) {
							if (items[j].match(/LEFT/i)) { 
								aligns[j - 1] = LEFT;
							} else if (items[j].match(/CENTER/i)) {
								aligns[j - 1] = CENTER;
							} else if (items[j].match(/RIGHT/i)) {
								aligns[j - 1] = RIGHT;
							}
						}
						lnArray.splice(i--, 1);
						continue;
					}
				}
			}
			if (items[0].length == 0) {
				items.splice(0, 1);
			}
			if (items[items.length - 1].length == 0) {
				items.splice(items.length - 1, 1);
			}
			var row = [];
			var hmergePrev = false;
			for (var j = 0; j < items.length; j++) {
				var hmerge = false;
				var vmerge = false;
				var ma = aligns[j];
				var str = items[j];
				if (str.match(/^LEFT:/i)) {
					ma = LEFT;
					str = str.substring(5);
				} else if (str.match(/^CENTER:/i)) {
					ma = CENTER;
					str = str.substring(7);
				} else if (str.match(/^RIGHT:/i)) {
					ma = RIGHT;
					str = str.substring(6);
				}
				if (borderStyle >= 2) {
					if (str == '>') {
						hmerge = true;
						str = '';
					}
					if (str == '~') {
						vmerge = true;
						str = '';
					}
				}
				var cell = new Cell(str);

				if (cell.textDots > this.maxwidth) {
					this.maxwidth = cell.textDots;
				}
				if (cell.textDots > this.maxwidthColumn[j]) {
					this.maxwidthColumn[j] = cell.textDots;
				}
				cell.borderStyle = borderStyle;
				cell.align = ma;
				cell.header = header;
				cell.footer = footer;
				cell.nextline = nextline;
				if (j > 0) {
					cell.left = row[j - 1];
					row[j - 1].right = cell;
					if (row[j - 1].keisenLinks.right) {
						cell.keisenLinks.left = row[j - 1].keisenLinks.right;
					} else {
						cell.keisenLinks.left = row[j - 1].keisenLinks.right = new KeisenObject();
					}
					if (row[j - 1].keisenLinks.rightTop) {
						cell.keisenLinks.leftTop = row[j - 1].keisenLinks.rightTop;
					} else {
						cell.keisenLinks.leftTop = row[j - 1].keisenLinks.rightTop = new KeisenObject();
					}
					if (row[j - 1].keisenLinks.rightBottom) {
						cell.keisenLinks.leftBottom = row[j - 1].keisenLinks.rightBottom;
					} else {
						cell.keisenLinks.leftBottom = row[j - 1].keisenLinks.rightBottom = new KeisenObject();
					}
					
				}
				if (i > 0) {
					cell.top = rows[i - 1][j];
					rows[i - 1][j].bottom = cell;
					if (rows[i - 1][j].keisenLinks.leftBottom) {
						cell.keisenLinks.leftTop = rows[i - 1][j].keisenLinks.leftBottom;
					} else {
						cell.keisenLinks.leftTop = rows[i - 1][j].keisenLinks.leftBottom = new KeisenObject();
					}
					if (rows[i - 1][j].keisenLinks.bottom) {
						cell.keisenLinks.top = rows[i - 1][j].keisenLinks.bottom;
					} else {
						cell.keisenLinks.top = rows[i - 1][j].keisenLinks.bottom = new KeisenObject();
					}
					if (rows[i - 1][j].keisenLinks.rightBottom) {
						cell.keisenLinks.rightTop = rows[i - 1][j].keisenLinks.rightBottom;
					} else {
						cell.keisenLinks.rightTop = rows[i - 1][j].keisenLinks.rightBottom = new KeisenObject();
					}
				}
				if (!cell.left) {
					cell.keisenLinks.left = new KeisenObject();
					cell.keisenLinks.leftBottom = new KeisenObject();
					cell.keisenLinks.leftTop = (cell.top)? cell.top.keisenLinks.leftBottom : new KeisenObject();
				}
				if (!cell.top) {
					cell.keisenLinks.top = new KeisenObject();
					cell.keisenLinks.rightTop = new KeisenObject();
					cell.keisenLinks.leftTop = (cell.left)? cell.left.keisenLinks.rightTop : new KeisenObject();
				}
				if (j == (items.length - 1)) {
					cell.keisenLinks.rightTop = (cell.top)? cell.top.keisenLinks.rightBottom : new KeisenObject();
					cell.keisenLinks.right = new KeisenObject();
					cell.keisenLinks.rightBottom = new KeisenObject();
				}
				if (i == (lnArray.length - 1)) {
					cell.keisenLinks.bottom = new KeisenObject();
					cell.keisenLinks.rightBottom = new KeisenObject();
					cell.keisenLinks.leftBottom = (cell.left)? cell.left.keisenLinks.rightBottom : new KeisenObject();
				}
				if (vmerge) {
					cell.mergeLinks.top = cell.top;
					cell.top.mergeLinks.bottom = cell;
					vmerge = false;
					if (cell.left && cell.left.mergeLinks.top) {
						var tmp = cell;
						while (tmp = tmp.mergeLinks.top) { if (!tmp.mergeLinks.top) { break; } }
						if (tmp.mergeLinks.left) {
							cell.mergeLinks.left = cell.left;
							cell.left.mergeLinks.right = cell;
						}
					}
				}
				if (hmergePrev) {
					cell.mergeLinks.left = cell.left;
					cell.left.mergeLinks.right = cell;
					hmergePrev = false;
				}
				if (hmerge) {
					hmergePrev = true;
				}
				row.push(cell);
			}
			rows.push(row);
		}
		return rows;
	}
};

// var DEBUG = true;
if (DEBUG === undefined || (!DEBUG)) { // 実行メイン -----------------
var vcx = v2c.context;
var wp = vcx.thread.openWritePanel();
var tc = wp.message;
var seltext = String(tc.selText);
if (seltext) {
	var ret = tablemaker.make(seltext, STYLE);
	if (ret) {
		var ss = tc.selStart;
		var en = tc.selEnd;
		var tt = String(tc.text);
		if (tt.charAt(ss) == '\n') { ss++; }
		if (tt.length != en && tt.charAt(en) != '\n') { ret += '\n'; }
		tc.text = tt.substring(0, ss) + ret + tt.substring(en);
		if (PREVIEW) {
			wp.preview = true;
		}
	}
}

} else { // DEBUG START ----------------------------------------------

//var teststr = '';
//teststr += '|CENTER:|CENTER:|CENTER:|CENTER:|CENTER:|CENTER:|c\n';
//teststr += '|キャラクタ|戦闘時間計|平均戦闘時間|総経験値|平均|討伐数|h\n';
//teststr += '|LEFT:|CENTER:|RIGHT:|RIGHT:|RIGHT:|RIGHT:|c\n';
//teststr += '|Nightmare Funguar|33分51秒|1分 5秒|>|182|32|\n';
//teststr += '|>|Nightmare Sheep&br;とても強い|1分 6秒|6025|182|33|b\n';
//teststr += '|~|~|1分 6秒|1|1|33|\n';
//teststr += '|a|a|1分11秒|5275|181|~|\n';
//teststr += '|Vanguard Liberator|4分 3秒|4分 3秒|180|180|~|f\n';
//var ret = tablemaker.make(teststr, 4);
//var f = v2c.getScriptDataFile('resultTable.txt');
//v2c.writeStringToFile(f, ret);


//v2c.println('completed.');

} // DEBUG END ---------------------------------------------------------

})();
